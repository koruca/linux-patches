From 9538a0c53759bbaf0929e2371e1bd0aee1af5761 Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Wed, 23 May 2012 16:40:22 +0900
Subject: [PATCH 38/73] rcarvin: do refactoring redundant code for the continuous/single transfers

This integrates similar code for each transfer, continuous and single.
And the variables 'get_pos' and 'set_pos' could be use to maintain
the 'last' processed buffer rather than the 'next' processing one.
---
 drivers/media/video/rcarvin.c |  146 +++++++++++++++++++---------------------
 1 files changed, 69 insertions(+), 77 deletions(-)

diff --git a/drivers/media/video/rcarvin.c b/drivers/media/video/rcarvin.c
index 384974f..edad0d2 100644
--- a/drivers/media/video/rcarvin.c
+++ b/drivers/media/video/rcarvin.c
@@ -360,6 +360,11 @@ static void free_buffer(struct videobuf_queue *vq,
 #define VIN_VNDMR2_FTEV            (0x00020000)
 		/* Field Toggle Enable of Vsync */
 
+static inline bool is_continuous_transfer(struct rcar_vin_dev *pcdev)
+{
+	return (pcdev->vb_count >= CONT_TRANS);
+}
+
 /*
  * return value doesn't reflex the success/failure to queue the new buffer,
  * but rather the status of the previous buffer.
@@ -433,7 +438,7 @@ static int rcar_vin_capture(struct rcar_vin_dev *pcdev)
 		break;
 	}
 
-	if (pcdev->vb_count >= CONT_TRANS) {
+	if (is_continuous_transfer(pcdev)) {
 		/* single transfer ON */
 		vin_write(pcdev, V0FC, VIN_VNFC_C_FRAME);
 	} else {
@@ -534,45 +539,31 @@ static void rcar_vin_videobuf_queue(struct videobuf_queue *vq,
 	struct soc_camera_host *ici = to_soc_camera_host(icd->dev.parent);
 	struct rcar_vin_dev *pcdev = ici->priv;
 	dma_addr_t phys_addr_top;
-	struct videobuf_buffer *queue_vb;
+	int n_slots;
 
 	dev_dbg(icd->dev.parent, "%s (vb=0x%p) 0x%08lx %zd\n", __func__,
 		vb, vb->baddr, vb->bsize);
 
-	vb->state = VIDEOBUF_QUEUED;
-	if (pcdev->vb_count >= CONT_TRANS) { /* continuous transfer */
-		if (pcdev->mb_cnt >= MB_NUM) { /* add queue */
-			list_add_tail(&vb->queue, &pcdev->capture);
-		} else {
-			queue_vb = vb;
-			phys_addr_top = videobuf_to_dma_contig(queue_vb);
-			vin_write(pcdev, (V0MB1 + (BUF_OFF * pcdev->set_pos)),
-				 phys_addr_top);
-			pcdev->queue_buf[pcdev->set_pos] = queue_vb;
-			pcdev->queue_buf[pcdev->set_pos]->state = VIDEOBUF_ACTIVE;
-			/* increment set_pos  */
-			pcdev->set_pos = (pcdev->set_pos + 1) % MB_NUM;
-			pcdev->mb_cnt++;
-		}
+	n_slots = is_continuous_transfer(pcdev) ? MB_NUM : 1;
+	if (pcdev->mb_cnt >= n_slots) { /* add queue */
+		vb->state = VIDEOBUF_QUEUED;
+		list_add_tail(&vb->queue, &pcdev->capture);
+	} else {
+		int slot = (pcdev->set_pos + 1) % n_slots;
+
+		phys_addr_top = videobuf_to_dma_contig(vb);
+		vin_write(pcdev, (V0MB1 + (BUF_OFF * slot)),
+			 phys_addr_top);
+		pcdev->queue_buf[slot] = vb;
+		pcdev->queue_buf[slot]->state = VIDEOBUF_ACTIVE;
+		pcdev->set_pos = slot;
+		pcdev->mb_cnt++;
+	}
 
-		if ((pcdev->capture_status != RUNNING) &&
-			(pcdev->mb_cnt >= MB_NUM)) {
-			pcdev->capture_status = RUNNING;
-			rcar_vin_capture(pcdev);
-		}
-	} else { /* single transfer */
-		if (pcdev->mb_cnt >= 1) { /* add queue */
-			list_add_tail(&vb->queue, &pcdev->capture);
-		} else {
-			queue_vb = vb;
-			phys_addr_top = videobuf_to_dma_contig(queue_vb);
-			vin_write(pcdev, V0MB1, phys_addr_top);
-			pcdev->queue_buf[SINGLE_BUF] = queue_vb;
-			pcdev->queue_buf[SINGLE_BUF]->state = VIDEOBUF_ACTIVE;
-			pcdev->mb_cnt++;
-			pcdev->capture_status = RUNNING;
-			rcar_vin_capture(pcdev);
-		}
+	if ((pcdev->capture_status != RUNNING) &&
+	    (pcdev->mb_cnt >= n_slots)) {
+		pcdev->capture_status = RUNNING;
+		rcar_vin_capture(pcdev);
 	}
 }
 
@@ -637,6 +628,8 @@ static irqreturn_t rcar_vin_irq(int irq, void *data)
 	u32 status_of_int, ms_fbs;
 	dma_addr_t phys_addr_top;
 	struct videobuf_buffer *next_queue_vb;
+	bool empty = 0, start = 0, stopped;
+	int n_slots;
 
 	spin_lock_irqsave(&pcdev->lock, flags);
 
@@ -644,69 +637,68 @@ static irqreturn_t rcar_vin_irq(int irq, void *data)
 	status_of_int = vin_read(pcdev, V0INTS);
 	vin_write(pcdev, V0INTS, status_of_int);
 
-	if ((pcdev->capture_status == STOPPING) &&
-	    ((vin_read(pcdev, V0MS) & VIN_VNMS_CA) == 0)) {
-		pcdev->capture_status = STOPPED;
-		if (pcdev->wait_for_completion == 1) {
-			pcdev->wait_for_completion = 0;
-			complete(&pcdev->capture_stop);
+	stopped = ((vin_read(pcdev, V0MS) & VIN_VNMS_CA) == 0);
+
+	if (pcdev->wait_for_completion == 0) {
+		if (is_continuous_transfer(pcdev)) {
+			ms_fbs = (vin_get_status(pcdev) & MB_MASK) >> 3;
+			n_slots = MB_NUM;
+		} else {
+			ms_fbs = 3;
+			n_slots = 1;
+			goto single;
 		}
-	} else if (pcdev->vb_count >= CONT_TRANS) { /* continuous transfer */
-		ms_fbs = (vin_get_status(pcdev) & MB_MASK) >> 3;
 
 		/* wait until get_pos and mb_status become equal */
-		while (((pcdev->get_pos + MB_NUM - 1) % MB_NUM) != ms_fbs) {
+		while (ms_fbs < 3 && pcdev->get_pos != ms_fbs) {
+		single:
+			pcdev->get_pos = (pcdev->get_pos + 1) % n_slots;
 			pcdev->queue_buf[pcdev->get_pos]->field_count++;
-			pcdev->queue_buf[pcdev->get_pos]->state = VIDEOBUF_DONE;
+			pcdev->queue_buf[pcdev->get_pos]->state =
+				VIDEOBUF_DONE;
 			do_gettimeofday(&pcdev->queue_buf[pcdev->get_pos]->ts);
 			wake_up(&pcdev->queue_buf[pcdev->get_pos]->done);
 			pcdev->mb_cnt--;
 			pcdev->queue_buf[pcdev->get_pos] = NULL;
-			/* increment get_pos  */
-			pcdev->get_pos = (pcdev->get_pos + 1) % MB_NUM;
+			if (pcdev->capture_status == STOPPING)
+				continue;
 			/* set next frame addr */
 			if (list_empty(&pcdev->capture)) {
-				/* stop operation */
-				pcdev->capture_status = STOPPING;
-				rcar_vin_deinit_capture(pcdev);
+				empty = 1;
 			} else {
+				int slot = (pcdev->set_pos + 1) % n_slots;
 				next_queue_vb = list_entry(pcdev->capture.next,
 					 struct videobuf_buffer, queue);
 				list_del_init(&next_queue_vb->queue);
-				pcdev->queue_buf[pcdev->set_pos]
-					 = next_queue_vb;
-				pcdev->queue_buf[pcdev->set_pos]->state = VIDEOBUF_ACTIVE;
+				pcdev->queue_buf[slot] = next_queue_vb;
+				pcdev->queue_buf[slot]->state =
+					VIDEOBUF_ACTIVE;
 				phys_addr_top =
 					 videobuf_to_dma_contig(next_queue_vb);
-				vin_write(pcdev, (V0MB1 + (BUF_OFF *
-					 pcdev->set_pos)), phys_addr_top);
-				/* increment set_pos */
-				pcdev->set_pos = (pcdev->set_pos + 1) % MB_NUM;
+				vin_write(pcdev, V0MB1 + (BUF_OFF * slot),
+					  phys_addr_top);
+				pcdev->set_pos = slot;
 				pcdev->mb_cnt++;
+				start = 1;
 			}
 		}
-	} else { /* single transfer operation */
-		pcdev->capture_status = STOPPED;
-		pcdev->queue_buf[SINGLE_BUF]->field_count++;
-		pcdev->queue_buf[SINGLE_BUF]->state = VIDEOBUF_DONE;
-		do_gettimeofday(&pcdev->queue_buf[SINGLE_BUF]->ts);
-		wake_up(&pcdev->queue_buf[SINGLE_BUF]->done);
-		pcdev->mb_cnt--;
-		pcdev->queue_buf[SINGLE_BUF] = NULL;
-		/* set next frame addr */
-		if (!list_empty(&pcdev->capture)) {
-			next_queue_vb = list_entry(pcdev->capture.next,
-				 struct videobuf_buffer, queue);
-			list_del_init(&next_queue_vb->queue);
-			pcdev->queue_buf[SINGLE_BUF] = next_queue_vb;
-			pcdev->queue_buf[SINGLE_BUF]->state = VIDEOBUF_ACTIVE;
-			phys_addr_top =
-				 videobuf_to_dma_contig(next_queue_vb);
-			vin_write(pcdev, V0MB1, phys_addr_top);
+
+		if (stopped)
+			pcdev->capture_status = STOPPED;
+
+		if (empty && pcdev->capture_status == RUNNING) {
+			/* stop continuous transfer */
+			pcdev->capture_status = STOPPING;
+			rcar_vin_deinit_capture(pcdev);
+		} else if (start && pcdev->capture_status == STOPPED) {
+			/* start single transfer */
 			pcdev->capture_status = RUNNING;
 			rcar_vin_capture(pcdev);
-			pcdev->mb_cnt++;
 		}
+	} else if (stopped) {
+		pcdev->capture_status = STOPPED;
+		pcdev->wait_for_completion = 0;
+		complete(&pcdev->capture_stop);
 	}
 
 	spin_unlock_irqrestore(&pcdev->lock, flags);
@@ -736,7 +728,7 @@ static int rcar_vin_add_device(struct soc_camera_device *icd)
 	/* adjust get_pos and set_pos
 	   to the next of the last terminated position. */
 	ms_fbs = (vin_get_status(pcdev) & MB_MASK) >> 3;
-	pcdev->set_pos = pcdev->get_pos = (ms_fbs >= 2) ? 0 : ms_fbs + 1;
+	pcdev->set_pos = pcdev->get_pos = (ms_fbs >= 2) ? 2 : ms_fbs;
 
 	ret = rcar_vin_soft_reset(pcdev);
 	if (!ret)
-- 
1.7.0.4

