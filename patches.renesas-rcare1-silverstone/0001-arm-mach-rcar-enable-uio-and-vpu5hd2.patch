From 3df7dd3cf8937df254c49be958cf1cf3a64421ce Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Thu, 12 Jan 2012 10:30:34 +0900
Subject: [PATCH 01/80] arm: mach-rcar: enable uio and vpu5hd2

This implementation is for R-Car E1 Linux OMX (alpha edition).
It was released by Renesas Electronics Corporation.
---
 arch/arm/Kconfig                           |    2 +-
 arch/arm/mach-rcar/Kconfig                 |    3 +
 arch/arm/mach-rcar/board-silverstone.c     |  106 ++++++++++++++++++++++++++++
 arch/arm/mach-rcar/clock.c                 |   40 +++++++++++
 arch/arm/mach-rcar/include/mach/irqs.h     |    2 +
 arch/arm/mach-rcar/include/mach/memory.h   |    2 +-
 arch/arm/mach-rcar/include/mach/platform.h |    1 +
 arch/arm/mach-rcar/intc.c                  |   29 +++++++-
 arch/arm/mach-rcar/intc.h                  |    3 +
 9 files changed, 184 insertions(+), 4 deletions(-)

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index be4fd10..a76b3aa 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1068,7 +1068,7 @@ source "arch/arm/common/Kconfig"
 config FORCE_MAX_ZONEORDER
 	int
 	depends on SA1111 || ARCH_RCAR
-	default "14" if ARCH_RCAR
+	default "15" if ARCH_RCAR
 	default "9"
 
 menu "Bus support"
diff --git a/arch/arm/mach-rcar/Kconfig b/arch/arm/mach-rcar/Kconfig
index 27e4db7..797e2a8 100644
--- a/arch/arm/mach-rcar/Kconfig
+++ b/arch/arm/mach-rcar/Kconfig
@@ -21,6 +21,9 @@ config ARCH_RCE1
 config MACH_SILVERSTONE
 	bool "Support Silverstone platform"
 	depends on ARCH_RCE1
+    select UIO
+    select UIO_PDRV
+    select UIO_PDRV_GENIRQ
 	help
 	  Include support for the Silverstone platform.
 	  The Silverstone is a solution board for the R-Car E1 SoC,
diff --git a/arch/arm/mach-rcar/board-silverstone.c b/arch/arm/mach-rcar/board-silverstone.c
index ae769cf..acdd4de 100644
--- a/arch/arm/mach-rcar/board-silverstone.c
+++ b/arch/arm/mach-rcar/board-silverstone.c
@@ -49,6 +49,87 @@
 #include "fpga.h"
 #include "intc.h"
 
+#include <linux/uio_driver.h>
+
+static struct uio_info vpu_platform_data = {
+    .name           = "VPU5HD2_H",
+    .version        = "0.0",
+    .irq            = IRQ_VPU5HD2_H,
+};
+
+static struct resource vpu_resources[] = {
+    [0] = {
+        .name       = "VPU_REG",
+        .start      = 0xFD000000,
+        .end        = 0xFD000157,
+        .flags      = IORESOURCE_MEM,
+    },
+
+    [1] = {
+    },
+};
+
+static struct platform_device vpu_device = {
+    .name           = "uio_pdrv_genirq",
+    .id             = 0,
+    .dev            = {
+        .platform_data  = &vpu_platform_data,
+    },
+    .resource       = vpu_resources,
+    .num_resources  = ARRAY_SIZE(vpu_resources),
+};
+
+static void __init memchunk_cmdline_override( char *name, unsigned long *sizep )
+{
+    char *p = boot_command_line;
+    int   k = strlen(name);
+
+    while( ( p = strstr( p, "memchunk." ) ) ) {
+        p += 9; /* strlen("memchunk.") */
+        if ( !strncmp( name, p, k ) && p[k] == '=' ) {
+            p      += k + 1;
+            *sizep  = memparse(p, NULL);
+            pr_info("%s: forcing memory chunk size to 0x%08lx\n", name, *sizep);
+            break;
+        }
+    }
+}
+
+int __init platform_resource_setup_memory( struct platform_device   *pdev,
+                                           char                     *name,
+                                           unsigned long            memsize )
+{
+    struct resource     *r;
+    dma_addr_t          dma_handle;
+    void                *buf;
+
+    r = pdev->resource + pdev->num_resources - 1;
+    if( r->flags ) {
+        pr_warning( "%s: unable to find empty space for resource\n", name );
+        return -EINVAL;
+    }
+
+    memchunk_cmdline_override( name, &memsize );
+    if( !memsize ) {
+        return 0;
+    }
+
+    buf = dma_alloc_coherent( NULL, memsize, &dma_handle, GFP_KERNEL );
+    if( !buf ) {
+        pr_warning( "%s: unable to allocate memory\n", name );
+        return -ENOMEM;
+    }
+
+    memset( buf, 0, memsize );
+
+    r->flags = IORESOURCE_MEM;
+    r->start = dma_handle;
+    r->end   = r->start + memsize - 1;
+    r->name  = name;
+
+    return 0;
+}
+
 static struct map_desc rce1_io_desc[] __initdata = {
 	/* Map IO memory for R-Car E1 embedded controllers */
 	{
@@ -563,6 +644,7 @@ static struct platform_device *devs[] __initdata = {
 	&silverstone_smsc911x_device,
 	&rcar_vin0_device,
 	&rcar_camera[0],
+	&vpu_device,
 	&rcar_pmu_device,
 };
 
@@ -587,6 +669,9 @@ static struct sys_timer silverstone_timer = {
 
 static void __init silverstone_init(void)
 {
+	/* allocate memory for VPU5HD */
+	platform_resource_setup_memory( &vpu_device, "vpu", 64 << 20 );
+
 	platform_add_devices(devs, ARRAY_SIZE(devs));
 	rcar_gpio_init();
 	rcar_fpga_func_init();
@@ -594,6 +679,27 @@ static void __init silverstone_init(void)
 
 	i2c_register_board_info(0, silverstone_i2c_devices,
 				ARRAY_SIZE(silverstone_i2c_devices));
+
+	/* SSS module clear clock mask */
+	/* clear SSI0 SSI1 SSI2 SSI3 */
+	writel(readl(IO_ADDRESS(RC_BASE_CPG + 0x30)) & 0xffffe1ff,
+		   IO_ADDRESS(RC_BASE_CPG + 0x30));
+	/* clear SSI4 */
+	writel(readl(IO_ADDRESS(RC_BASE_CPG + 0x3c)) & 0xfffff7ff,
+		   IO_ADDRESS(RC_BASE_CPG + 0x3c));
+
+	/* VIN module clear clock mask */
+	writel((readl(IO_ADDRESS(0xFFC80034)) & ~(0x01 << 10)),
+			 IO_ADDRESS(RC_BASE_CPG + 0x34));
+	/* VIN BUS SW Enable */
+	writel(0x10 | readl(IO_ADDRESS(SILVERSTONE_BASE_FPGA+0x500)),
+			IO_ADDRESS(SILVERSTONE_BASE_FPGA+0x500));
+	/* BT656 mode */
+	writel(0x02, IO_ADDRESS(SILVERSTONE_BASE_FPGA+0x528));
+	/* VDEC_TRG=0 */
+	writel((~0x40 & readl(IO_ADDRESS(SILVERSTONE_BASE_FPGA+0x80C))),
+			IO_ADDRESS(SILVERSTONE_BASE_FPGA+0x80C));
+
 }
 
 MACHINE_START(SILVERSTONE, "SILVERSTONE")
diff --git a/arch/arm/mach-rcar/clock.c b/arch/arm/mach-rcar/clock.c
index ab41df3..6ce98dd 100644
--- a/arch/arm/mach-rcar/clock.c
+++ b/arch/arm/mach-rcar/clock.c
@@ -31,6 +31,43 @@
 
 static DEFINE_SPINLOCK(clocks_lock);
 
+
+
+static void vpu5hd2_clock_init( void )
+{
+    unsigned long __mstpcr4;
+    unsigned long __mstpcr5;
+
+    printk( "UIO: Supply clock for ICB\n" );
+    __mstpcr4 = readl( IO_ADDRESS(RC_BASE_CPG + 0x50) );
+    __mstpcr4 &= ~(1 << 10);
+    writel( __mstpcr4, IO_ADDRESS(RC_BASE_CPG + 0x50) );
+
+    printk( "UIO: Supply clock for VIO6C\n" );
+    __mstpcr5 = readl( IO_ADDRESS(RC_BASE_CPG + 0x54) );
+    __mstpcr5 &= ~(1 << 17);
+    writel( __mstpcr5, IO_ADDRESS(RC_BASE_CPG + 0x54) );
+
+    printk( "UIO: Supply clock for 2D-DMAC\n" );
+    __mstpcr5 = readl( IO_ADDRESS(RC_BASE_CPG + 0x54) );
+    __mstpcr5 &= ~(1 << 15);
+    writel( __mstpcr5, IO_ADDRESS(RC_BASE_CPG + 0x54) );
+
+    printk( "UIO: Supply clock for MERAM\n" );
+    __mstpcr5 = readl( IO_ADDRESS(RC_BASE_CPG + 0x54) );
+    __mstpcr5 &= ~(1 << 13);
+    writel( __mstpcr5, IO_ADDRESS(RC_BASE_CPG + 0x54) );
+
+    printk( "UIO: Supply clock for VPU5HD2\n" );
+    __mstpcr5 = readl( IO_ADDRESS(RC_BASE_CPG + 0x54) );
+    __mstpcr5 &= ~(1 << 1);
+    writel( __mstpcr5, IO_ADDRESS(RC_BASE_CPG + 0x54) );
+
+    printk( "UIO: set SSB~_SWAP Little\n" );/* tantitive */
+    __mstpcr5 = 0x00000001UL;/* tantitive */
+    writel( __mstpcr5, IO_ADDRESS(0xFFFE1004) );/* tantitive */
+}
+
 static int sgx_clk_enable(struct clk *clk)
 {
 	int i;
@@ -327,6 +364,9 @@ void __init rcar_clock_init(void)
 		lookups[i].con_id = lookups[i].clk->name;
 		clkdev_add(&lookups[i]);
 	}
+
+	vpu5hd2_clock_init();
+
 }
 
 void __init rcar_cpg_init(void)
diff --git a/arch/arm/mach-rcar/include/mach/irqs.h b/arch/arm/mach-rcar/include/mach/irqs.h
index be9af71..f485168 100644
--- a/arch/arm/mach-rcar/include/mach/irqs.h
+++ b/arch/arm/mach-rcar/include/mach/irqs.h
@@ -38,6 +38,7 @@
 #define	IRQ_DMAC_H16_19	INT_DMAC_H16_19
 #define	IRQ_DMAC_H20_27	INT_DMAC_H20_27
 #define	IRQ_DMAC_H28_38	INT_DMAC_H28_38
+#define	IRQ_VPU5HD2	INT_VPU5HD2
 #define	IRQ_GIO		INT_GIO
 
 /* irq for intc2 */
@@ -46,6 +47,7 @@
 #define	IRQ_USBH_EHCI	(INTC2_IRQ_BASE + 1)
 #define	IRQ_DMAC_H(n)	(INTC2_IRQ_BASE + 2 + (n))	/* hpb-dmac 0-38 */
 #define	IRQ_GPIO(n)	(INTC2_IRQ_BASE + 41 + (n))	/* gpio 0-4 */
+#define	IRQ_VPU5HD2_H (INTC2_IRQ_BASE + 46 )
 
 /* irq for gpio port */
 #define	GPIO_IRQ_BASE	256
diff --git a/arch/arm/mach-rcar/include/mach/memory.h b/arch/arm/mach-rcar/include/mach/memory.h
index 672895d..fcd1a21 100644
--- a/arch/arm/mach-rcar/include/mach/memory.h
+++ b/arch/arm/mach-rcar/include/mach/memory.h
@@ -23,6 +23,6 @@
 /* physical DRAM offset */
 #define PHYS_OFFSET	UL(0x08000000)
 
-#define CONSISTENT_DMA_SIZE SZ_32M
+#define CONSISTENT_DMA_SIZE SZ_128M
 
 #endif /* __MACH_MEMORY_H */
diff --git a/arch/arm/mach-rcar/include/mach/platform.h b/arch/arm/mach-rcar/include/mach/platform.h
index 3248085..229561b 100644
--- a/arch/arm/mach-rcar/include/mach/platform.h
+++ b/arch/arm/mach-rcar/include/mach/platform.h
@@ -24,6 +24,7 @@
 #define RC_BASE_INTERNAL_IO	UL(0xfc000000)
 #define RC_BASE_USBH	UL(0xfca00000)	/* usbh */
 #define RC_BASE_SGX	UL(0xfce00000)	/* sgx */
+#define RC_BASE_VPU5HD2 UL(0xfd000000)  /* VPU5HD2 */
 #define RC_BASE_SD_0	UL(0xfd820000)	/* sdsc 0 */
 #define RC_BASE_SD_1	UL(0xfda20000)	/* sdsc 1 */
 #define RC_BASE_DMAC_S	UL(0xfe000000)	/* super-hyway dmac */
diff --git a/arch/arm/mach-rcar/intc.c b/arch/arm/mach-rcar/intc.c
index 7bfb167..3df5289 100644
--- a/arch/arm/mach-rcar/intc.c
+++ b/arch/arm/mach-rcar/intc.c
@@ -89,7 +89,9 @@ static struct intc2_child dmach28_38_child[] = {
 	{ (1<<9), IRQ_DMAC_H(37) },
 	{ (1<<10), IRQ_DMAC_H(38) },
 };
-
+static struct intc2_child vpu5hd2_child[] = {
+	{ (1<<4), IRQ_VPU5HD2_H },
+};
 static struct intc2_child gpio_child[] = {
 	{ (0xf<<0), IRQ_GPIO(0) },
 	{ (0xf<<4), IRQ_GPIO(1) },
@@ -136,6 +138,12 @@ static struct intc2_parent intc2_parent_desc[] = {
 		dmach28_38_child
 	},
 	{
+		IRQ_VPU5HD2,
+		IO_ADDRESS(RC_BASE_INTC2 + 0x100),
+		ARRAY_SIZE(vpu5hd2_child),
+		vpu5hd2_child
+	},
+	{
 		IRQ_GIO,
 		IO_ADDRESS(RC_BASE_INTC2 + 0x108),
 		ARRAY_SIZE(gpio_child),
@@ -175,6 +183,11 @@ static void intc2_irq_mask(unsigned int irq)
 
 static void intc2_irq_unmask(unsigned int irq)
 {
+    unsigned long val;
+    if ( irq == IRQ_VPU5HD2_H ){
+        val = 1 << 4;
+        writel( val, IO_ADDRESS( INTC2_BASE + INT2SMSKCR1 ));
+    }
 }
 
 static struct irq_chip intc2_chip = {
@@ -184,6 +197,18 @@ static struct irq_chip intc2_chip = {
 	.unmask   = intc2_irq_unmask,
 };
 
+void
+my_handle_simple_irq(unsigned int irq, struct irq_desc *desc)
+{
+    unsigned long val;
+    handle_simple_irq(irq, desc);
+
+    if ( irq == IRQ_VPU5HD2_H ){
+        val = 0xFFFFFFFF; /* tentative : mask all INT2SMSKRG1 */
+        writel( val, IO_ADDRESS( INTC2_BASE + INT2SMSKRG1 ));
+    }
+}
+
 void __init rcar_irq_init(void)
 {
 	struct intc2_parent *parent;
@@ -197,7 +222,7 @@ void __init rcar_irq_init(void)
 		for (j = 0; j < parent->num_child; j++) {
 			irq = child->irq;
 			set_irq_chip(irq, &intc2_chip);
-			set_irq_handler(irq, handle_simple_irq);
+			set_irq_handler(irq, my_handle_simple_irq);
 			set_irq_flags(irq, IRQF_VALID);
 			child++;
 		}
diff --git a/arch/arm/mach-rcar/intc.h b/arch/arm/mach-rcar/intc.h
index bbeef6f..8caf25d 100644
--- a/arch/arm/mach-rcar/intc.h
+++ b/arch/arm/mach-rcar/intc.h
@@ -16,5 +16,8 @@
  * along with this program; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  */
+#define INTC2_BASE  ( 0xFE782000 )
+#define INT2SMSKRG1 ( 0x284 )
+#define INT2SMSKCR1 ( 0x28C )
 
 extern void rcar_irq_init(void) __init;
-- 
1.7.0.4

