From dd35e33f00daec80098bd983b8b901b7d8cc63a1 Mon Sep 17 00:00:00 2001
From: Katsuya Matsubara <matsu@igel.co.jp>
Date: Tue, 22 May 2012 18:42:02 +0900
Subject: [PATCH 35/73] rcarvin: manage active state of video buffers

This updates state of video buffers when they have been registered
to hardware. The active state indicates that a buffer could be
accessed by hardware during capturing. Conversely, capturing must
be stopped whenever an active buffer would be released.
---
 drivers/media/video/rcarvin.c |   50 +++++++++++++++++++++++------------------
 1 files changed, 28 insertions(+), 22 deletions(-)

diff --git a/drivers/media/video/rcarvin.c b/drivers/media/video/rcarvin.c
index e5dfd8a..da12e83 100644
--- a/drivers/media/video/rcarvin.c
+++ b/drivers/media/video/rcarvin.c
@@ -551,6 +551,7 @@ static void rcar_vin_videobuf_queue(struct videobuf_queue *vq,
 			vin_write(pcdev, (V0MB1 + (BUF_OFF * pcdev->set_pos)),
 				 phys_addr_top);
 			pcdev->queue_buf[pcdev->set_pos] = queue_vb;
+			pcdev->queue_buf[pcdev->set_pos]->state = VIDEOBUF_ACTIVE;
 			/* increment set_pos  */
 			pcdev->set_pos = (pcdev->set_pos + 1) % MB_NUM;
 			pcdev->mb_cnt++;
@@ -570,6 +571,7 @@ static void rcar_vin_videobuf_queue(struct videobuf_queue *vq,
 			phys_addr_top = videobuf_to_dma_contig(queue_vb);
 			vin_write(pcdev, V0MB1, phys_addr_top);
 			pcdev->queue_buf[SINGLE_BUF] = queue_vb;
+			pcdev->queue_buf[SINGLE_BUF]->state = VIDEOBUF_ACTIVE;
 			pcdev->mb_cnt++;
 			pcdev->capture_status = RUNNING;
 			rcar_vin_capture(pcdev);
@@ -587,32 +589,34 @@ static void rcar_vin_videobuf_release(struct videobuf_queue *vq,
 
 	spin_lock_irqsave(&pcdev->lock, flags);
 
-	while (pcdev->capture_status != STOPPED) {
+	if (vb->state == VIDEOBUF_ACTIVE) {
+		while (pcdev->capture_status != STOPPED) {
+			/* issue stop if running */
+			if (pcdev->capture_status == RUNNING) {
+				pcdev->capture_status = STOPPING;
+				rcar_vin_deinit_capture(pcdev);
+			}
 
-		/* issue stop if running */
-		if (pcdev->capture_status == RUNNING) {
-			pcdev->capture_status = STOPPING;
-			rcar_vin_deinit_capture(pcdev);
+			/* wait until capturing has been stopped */
+			if (pcdev->capture_status == STOPPING) {
+				pcdev->wait_for_completion = 1;
+				spin_unlock_irqrestore(&pcdev->lock, flags);
+				wait_for_completion(&pcdev->capture_stop);
+				spin_lock_irqsave(&pcdev->lock, flags);
+			}
 		}
 
-		if (pcdev->capture_status == STOPPING) {
-			pcdev->wait_for_completion = 1;
-			spin_unlock_irqrestore(&pcdev->lock, flags);
-			wait_for_completion(&pcdev->capture_stop);
-			spin_lock_irqsave(&pcdev->lock, flags);
-		}
-	}
-
-	for (i = 0; i < MB_NUM; i++) {
-		if (pcdev->queue_buf[i] == vb) {
-			pcdev->mb_cnt--;
-			/* increment get_pos  */
-			pcdev->get_pos = (pcdev->get_pos + 1) % MB_NUM;
-			pcdev->queue_buf[i] = NULL;
+		vb->state = VIDEOBUF_ERROR;
+		for (i = 0; i < MB_NUM; i++) {
+			if (pcdev->queue_buf[i] == vb) {
+				pcdev->mb_cnt--;
+				/* increment get_pos  */
+				pcdev->get_pos = (pcdev->get_pos + 1) % MB_NUM;
+				pcdev->queue_buf[i] = NULL;
+				break;
+			}
 		}
-	}
-
-	if (!list_empty(&vb->queue) && (vb->state == VIDEOBUF_QUEUED)) {
+	} else if (!list_empty(&vb->queue) && (vb->state == VIDEOBUF_QUEUED)) {
 		vb->state = VIDEOBUF_ERROR;
 		list_del_init(&vb->queue);
 	}
@@ -672,6 +676,7 @@ static irqreturn_t rcar_vin_irq(int irq, void *data)
 				pcdev->queue_cnt--;
 				pcdev->queue_buf[pcdev->set_pos]
 					 = next_queue_vb;
+				pcdev->queue_buf[pcdev->set_pos]->state = VIDEOBUF_ACTIVE;
 				phys_addr_top =
 					 videobuf_to_dma_contig(next_queue_vb);
 				vin_write(pcdev, (V0MB1 + (BUF_OFF *
@@ -701,6 +706,7 @@ static irqreturn_t rcar_vin_irq(int irq, void *data)
 			list_del_init(&next_queue_vb->queue);
 			pcdev->queue_cnt--;
 			pcdev->queue_buf[SINGLE_BUF] = next_queue_vb;
+			pcdev->queue_buf[SINGLE_BUF]->state = VIDEOBUF_ACTIVE;
 			phys_addr_top =
 				 videobuf_to_dma_contig(next_queue_vb);
 			vin_write(pcdev, V0MB1, phys_addr_top);
-- 
1.7.0.4

